package com.anggastudio.printama.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricTestRunner;
import org.robolectric.annotation.Config;

import static org.junit.Assert.*;

/**
 * Unit tests for {@link StrUtil}
 * Tests string utility methods including non-ASCII character encoding
 */
@RunWith(RobolectricTestRunner.class)
@Config(sdk = 28)
public class StrUtilTest {

    // Test encodeNonAscii method
    @Test
    public void testEncodeNonAscii_basicCharacters() {
        String input = "Hello World";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Basic ASCII characters should remain unchanged", "Hello World", result);
    }

    @Test
    public void testEncodeNonAscii_emptyString() {
        String input = "";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Empty string should remain empty", "", result);
    }

    @Test
    public void testEncodeNonAscii_nullInput() {
        String result = StrUtil.encodeNonAscii(null);
        assertNull("Null input should return null", result);
    }

    @Test
    public void testEncodeNonAscii_accentedCharacters() {
        // Test various accented characters
        assertEquals("√† should be converted to a", "a", StrUtil.encodeNonAscii("√†"));
        assertEquals("√° should be converted to a", "a", StrUtil.encodeNonAscii("√°"));
        assertEquals("√¢ should be converted to a", "a", StrUtil.encodeNonAscii("√¢"));
        assertEquals("√£ should be converted to a", "a", StrUtil.encodeNonAscii("√£"));
        assertEquals("√§ should be converted to a", "a", StrUtil.encodeNonAscii("√§"));
        assertEquals("√• should be converted to a", "a", StrUtil.encodeNonAscii("√•"));
        assertEquals("√¶ should be converted to ae", "ae", StrUtil.encodeNonAscii("√¶"));
    }

    @Test
    public void testEncodeNonAscii_eCharacters() {
        assertEquals("√® should be converted to e", "e", StrUtil.encodeNonAscii("√®"));
        assertEquals("√© should be converted to e", "e", StrUtil.encodeNonAscii("√©"));
        assertEquals("√™ should be converted to e", "e", StrUtil.encodeNonAscii("√™"));
        assertEquals("√´ should be converted to e", "e", StrUtil.encodeNonAscii("√´"));
    }

    @Test
    public void testEncodeNonAscii_iCharacters() {
        assertEquals("√¨ should be converted to i", "i", StrUtil.encodeNonAscii("√¨"));
        assertEquals("√≠ should be converted to i", "i", StrUtil.encodeNonAscii("√≠"));
        assertEquals("√Æ should be converted to i", "i", StrUtil.encodeNonAscii("√Æ"));
        assertEquals("√Ø should be converted to i", "i", StrUtil.encodeNonAscii("√Ø"));
    }

    @Test
    public void testEncodeNonAscii_oCharacters() {
        assertEquals("√≤ should be converted to o", "o", StrUtil.encodeNonAscii("√≤"));
        assertEquals("√≥ should be converted to o", "o", StrUtil.encodeNonAscii("√≥"));
        assertEquals("√¥ should be converted to o", "o", StrUtil.encodeNonAscii("√¥"));
        assertEquals("√µ should be converted to o", "o", StrUtil.encodeNonAscii("√µ"));
        assertEquals("√∂ should be converted to o", "o", StrUtil.encodeNonAscii("√∂"));
        assertEquals("√∏ should be converted to o", "o", StrUtil.encodeNonAscii("√∏"));
        assertEquals("≈ì should be converted to oe", "oe", StrUtil.encodeNonAscii("≈ì"));
    }

    @Test
    public void testEncodeNonAscii_uCharacters() {
        assertEquals("√π should be converted to u", "u", StrUtil.encodeNonAscii("√π"));
        assertEquals("√∫ should be converted to u", "u", StrUtil.encodeNonAscii("√∫"));
        assertEquals("√ª should be converted to u", "u", StrUtil.encodeNonAscii("√ª"));
        assertEquals("√º should be converted to u", "u", StrUtil.encodeNonAscii("√º"));
    }

    @Test
    public void testEncodeNonAscii_specialCharacters() {
        assertEquals("√ß should be converted to c", "c", StrUtil.encodeNonAscii("√ß"));
        assertEquals("√± should be converted to n", "n", StrUtil.encodeNonAscii("√±"));
        assertEquals("√ø should be converted to y", "y", StrUtil.encodeNonAscii("√ø"));
        assertEquals("√ü should be converted to ss", "ss", StrUtil.encodeNonAscii("√ü"));
    }

    @Test
    public void testEncodeNonAscii_uppercaseCharacters() {
        assertEquals("√Ä should be converted to A", "A", StrUtil.encodeNonAscii("√Ä"));
        assertEquals("√Å should be converted to A", "A", StrUtil.encodeNonAscii("√Å"));
        assertEquals("√à should be converted to E", "E", StrUtil.encodeNonAscii("√à"));
        assertEquals("√â should be converted to E", "E", StrUtil.encodeNonAscii("√â"));
        assertEquals("√ë should be converted to N", "N", StrUtil.encodeNonAscii("√ë"));
        assertEquals("√á should be converted to C", "C", StrUtil.encodeNonAscii("√á"));
    }

    @Test
    public void testEncodeNonAscii_mixedString() {
        String input = "Caf√© r√©sum√© na√Øve";
        String expected = "Cafe resume naive";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Mixed string with accented characters", expected, result);
    }

    @Test
    public void testEncodeNonAscii_sentenceWithAccents() {
        String input = "H√¥tel M√ºller √† Z√ºrich";
        String expected = "Hotel Muller a Zurich";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Sentence with various accented characters", expected, result);
    }

    @Test
    public void testEncodeNonAscii_numbersAndSymbols() {
        String input = "123!@#$%^&*()";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Numbers and symbols should remain unchanged", "123!@#$%^&*()", result);
    }

    @Test
    public void testEncodeNonAscii_whitespacePreservation() {
        String input = "  caf√©   r√©sum√©  ";
        String expected = "  cafe   resume  ";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Whitespace should be preserved", expected, result);
    }

    @Test
    public void testEncodeNonAscii_newlinesAndTabs() {
        String input = "caf√©\nr√©sum√©\tna√Øve";
        String expected = "cafe\nresume\tnaive";
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Newlines and tabs should be preserved", expected, result);
    }

    @Test
    public void testEncodeNonAscii_repeatedCharacters() {
        String input = "aaa√†√†√†eee√©√©√©ooo√≥√≥√≥";
        String expected = "aaaaaaeeeeeeoooooo"; // Fixed: should be 6 o's, not 7
        String result = StrUtil.encodeNonAscii(input);
        assertEquals("Repeated characters should all be converted", expected, result);
    }

    @Test
    public void testEncodeNonAscii_longString() {
        StringBuilder input = new StringBuilder();
        StringBuilder expected = new StringBuilder();
        
        // Create a long string with accented characters
        for (int i = 0; i < 1000; i++) {
            input.append("caf√©");
            expected.append("cafe");
        }
        
        String result = StrUtil.encodeNonAscii(input.toString());
        assertEquals("Long string should be processed correctly", expected.toString(), result);
    }

    @Test
    public void testEncodeNonAscii_singleCharacter() {
        assertEquals("Single accented character", "a", StrUtil.encodeNonAscii("√°"));
        assertEquals("Single ASCII character", "a", StrUtil.encodeNonAscii("a"));
        assertEquals("Single number", "1", StrUtil.encodeNonAscii("1"));
        assertEquals("Single symbol", "!", StrUtil.encodeNonAscii("!"));
    }

    @Test
    public void testEncodeNonAscii_edgeCases() {
        // Test characters that might not be handled
        String input = "Œ±Œ≤Œ≥Œ¥Œµ";
        String result = StrUtil.encodeNonAscii(input);
        // Greek letters might not be converted, so we just ensure no exception is thrown
        assertNotNull("Greek letters should not cause null result", result);
        
        // Test emoji (if any)
        String emojiInput = "Hello üòÄ World";
        String emojiResult = StrUtil.encodeNonAscii(emojiInput);
        assertNotNull("Emoji should not cause null result", emojiResult);
    }

    @Test
    public void testEncodeNonAscii_performanceTest() {
        // Simple performance test to ensure method doesn't hang
        StringBuilder largeInput = new StringBuilder();
        for (int i = 0; i < 10000; i++) {
            largeInput.append("√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂√∏≈ì√π√∫√ª√º√ø√ü");
        }
        
        long startTime = System.currentTimeMillis();
        String result = StrUtil.encodeNonAscii(largeInput.toString());
        long endTime = System.currentTimeMillis();
        
        assertNotNull("Large input should not return null", result);
        assertTrue("Method should complete in reasonable time", (endTime - startTime) < 5000); // 5 seconds max
    }

    @Test
    public void testEncodeNonAscii_consistentResults() {
        String input = "caf√© r√©sum√©";
        String result1 = StrUtil.encodeNonAscii(input);
        String result2 = StrUtil.encodeNonAscii(input);
        
        assertEquals("Multiple calls should return consistent results", result1, result2);
    }

    @Test
    public void testEncodeNonAscii_immutability() {
        String original = "caf√©";
        String originalCopy = new String(original);
        StrUtil.encodeNonAscii(original);
        
        assertEquals("Original string should not be modified", originalCopy, original);
    }
}